import Head from "next/head";
import { useEffect, useState } from "react";
import { fetchItems, deleteItem } from "./api";
import { Space, Table, Input, Button } from "antd";
import { useRouter } from "next/router";

export default function Home() {
  const [data, setData] = useState([]);
  const [pagination, setPagination] = useState({ current: 1, pageSize: 10 });
  const [loading, setLoading] = useState(false);
  const [isDeleting, setDeleting] = useState(false);
  const [searchText, setSearchText] = useState("");
  const router = useRouter();

  const loadData = async (params = {}) => {
    setLoading(true);
    const result = await fetchItems({
      _page: params.pagination?.current,
      _limit: params.pagination?.pageSize,
      q: searchText,
      _sort: params.sortField,
      _order: params.sortOrder,
    });
    setData(result?.data);
    setPagination({
      ...params.pagination,
      total: result?.count,
    });
    setLoading(false);
  };

  useEffect(() => {
    loadData({ pagination });
  }, [searchText]);

  const handleTableChange = (newPagination, filters, sorter) => {
    loadData({
      sortField: sorter.field,
      sortOrder: sorter.order === "ascend" ? "asc" : "desc",
      pagination: newPagination,
    });
  };

  const handleDelete = async (id) => {
    setDeleting(true);
    try {
      await deleteItem(id);
      setData((prevData) => prevData.filter((item) => item.id !== id));
      setPagination((prev) => ({
        ...prev,
        total: prev.total - 1,
      }));
    } catch (err) {
      console.error("Delete failed:", err);
    } finally {
      setDeleting(false);
    }
  };

  // useEffect(() => {
  //   fetch(
  //     "https://raw.githubusercontent.com/marchah/sea-ports/refs/heads/master/lib/ports.json"
  //   )
  //     .then((res) => res.json())
  //     .then((res) => {
  //       const portsArray = Object.keys(res).map((key, idx) => ({
  //         id: Number(idx + 1),
  //         ...res[key],
  //         idKey: key,
  //         // idForSorting: idx + 1,
  //       }));
  //       const finalData = { ports: portsArray };
  //       console.log("finalData", finalData);
  //       // Store the final data in the db.json that serve from the json-server
  //     });
  // }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div style={{ padding: 20 }}>
          <Space style={{ marginBottom: 16 }}>
            <Input.Search
              placeholder="Search..."
              onSearch={(e) => setSearchText(e)}
              style={{ width: 200 }}
            />
            <Button type="primary" onClick={() => router.push("/ports/add")}>
              Add Port
            </Button>
          </Space>

          <Table
            rowKey="id"
            columns={[
              {
                title: "ID",
                dataIndex: "id",
                key: "id",
                sorter: true,
              },
              {
                title: "Name",
                dataIndex: "name",
                key: "name",
                sorter: true,
              },
              {
                title: "City",
                dataIndex: "city",
                key: "city",
                sorter: true,
              },
              {
                title: "Country",
                dataIndex: "country",
                key: "country",
                sorter: true,
              },
              {
                title: "Province",
                dataIndex: "province",
                key: "province",
              },
              {
                title: "Timezone",
                dataIndex: "timezone",
                key: "timezone",
              },
              {
                title: "Coordinates",
                dataIndex: "coordinates",
                key: "coordinates",
                render: (coords) =>
                  coords ? `${coords[0]}, ${coords[1]}` : "",
              },
              {
                title: "Code",
                dataIndex: "code",
                key: "code",
              },
              {
                title: "Action",
                key: "action",
                render: (_, record) => (
                  <Space>
                    <Button
                      onClick={() => router.push(`/ports/edit/${record.id}`)}
                    >
                      Edit
                    </Button>
                    <Button danger onClick={() => handleDelete(record.id)}>
                      Delete
                    </Button>
                  </Space>
                ),
              },
            ]}
            dataSource={data}
            pagination={pagination}
            loading={loading || isDeleting}
            onChange={handleTableChange}
          />
        </div>
      </div>
    </>
  );
}
